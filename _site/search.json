[
  
    {
      "title"    : "Static Malware Analysis‚à∂ to string or to floss that is the question",
      "category" : "",
      "tags"     : "malware, static, and analysis",
      "url"      : "/2024/03/22/Static-Malware-Analysis-string-floss/",
      "date"     : "Mar 22, 2024",
      "content"  : "IntroductionEvery analyst has one or two methodologies for analyzing malware and perhaps even different approaches based on the malware type being analyzed. Regardless of many ways you can analyze malware we all do static analysis and look into strings at some point. String observation is a very important part of static analysis for a quick triage of the malware. When programming we use many strings in the source code and so it is with malware and those strings can reveal vital information such as the C2 server‚Äôs IP or domain and many library imports that can reveal what type of malware we‚Äôre dealing with.Although many tools incorporate some functionality that shows the string bytes, there are two main command line tools that almost every analyst uses and those are Strings and FLOSS. So today I want to cover in this article why you may want to choose one over the other. Before explaining that it will do us good to go over some string types.ASCIIASCII is a character encoding standard that represents a character using 7 or 8 bits which includes both upper and lower-case alphabetic characters, control characters, digits, and punctuation marks. As you may know, 8 bits is a byte so ASCII uses a single byte to represent a character.WIDEThe WIDE character encoding can represent a wider range of characters (pun intended) than ASCII and you may know it as the ‚Äúwchar_t‚Äù data type as used in C and C++ programming languages. WIDE character encoding can represent multiple international languages such as Chinese that have characters outside of the range of ASCII. WIDE uses a two-byte encoding scheme.UnicodeUnicode unlike the two mentioned above, it‚Äôs not a fixed-width encoding but rather a variable-width encoding which allows it to represent a larger set of characters from different languages, scripts, and symbols. Unicode uses many different schemes such as UTF-8, UTF-16, and UTF-32 assigning a unique code to the characters with some of the schemes using two bytes or four bytes.Understanding the Tools: Strings and FLOSSAlthough both tools aim to provide strings of byte values and represent them to you in a readable form, the tool Strings will look simply to the byte values that are in a range of printable ASCII characters. This makes it so that Strings output shows more junk making the malware appear as though it‚Äôs packed when it might not be the case. Many malware today will use WIDE or UNICODE strings which will use multi-byte characters as explained.FLOSS has the capability of looking not only for ASCII strings but also for WIDE characters, Unicode, and a myriad of string obfuscation techniques employed in malware. So FLOSS will give you a cleaner output than Strings and can reveal hidden commands.ConclusionBest practices and recommendationsUse Strings for a quick triage and analysis for simple malware samples that have none to little obfuscation. For more complicated malware samples use FLOSS to deal with highly obfuscated or encrypted malware that requires deeper string decoding.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/03/22/Static-Malware-Analysis-string-floss/'> <img src='/images/strings_vs_floss.png' alt='Static Malware Analysis‚à∂ to string or to floss that is the question'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-03-22T07:01:35-05:00'>Mar 22, 2024</time> </span> </div><h2 class='article__title'>Static Malware Analysis‚à∂ to string or to floss that is the question</h2> <p class='article__excerpt'>Every analyst has one or two methodologies for analyzing malware and perhaps even different approaches based on the malware type being analyzed. Regardless of many ways you can analyze malware we all do static analysis and look into strings at some point.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='PEMB'><img class='article__author-image' src='/images/0.png' alt='PEMB's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>PEMB</a><span> in </span> <span class='article-tags'> <a href='/tag/malware' class='article__tag'>malware</a>  <a href='/tag/static' class='article__tag'>static</a>  <a href='/tag/analysis' class='article__tag'>analysis</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "Powershell Dropper",
      "category" : "",
      "tags"     : "malware and dropper",
      "url"      : "/2023/05/30/Powershell-Dropper/",
      "date"     : "May 30, 2023",
      "content"  : "I found an interesting PowerShell script uploaded today on Malware Bazaar uploaded at 2023-05-31 02:06 (UTC) then turns out to be a dropper.Malwarte Bazaar is an online platform and repository used by many analysts and reverse engineers looking to collect and share information about malware samples and artifacts.This particular sample was a malicious PowerShell script dropper file to deliver and install additional malware. A delivery mechanism that is very much known in the community.Upon analyzing the file first thing you see is that it‚Äôs ASCII encoded in order to obfuscate its purpose.ASCII encoded PSSo continuing with static analysis of the file I decided to write two simple Python scripts that should do the job to deobfuscate this file. First I copied the obfuscated strings into a file and then create a simple carver to get rid of the unnecessary strings.with open('psscript.txt','r') as f:        ara = f.read().replace("[char]", "")        print(ara)        ara_ara = ara.replace("+", ",")        print(ara_ara)After that, all that was left now is to decode the ASCII strings. For that Python has a built function to make the job easier. I first put each individual carved string into 4 different variables and loop through and joined them to get the intended result.decoded = ''.join(chr(i) for i in snip1)print(decoded)decoded = ''.join(chr(i) for i in snip2)print(decoded)decoded = ''.join(chr(i) for i in snip3)print(decoded)decoded = ''.join(chr(i) for i in snip4)print(decoded)And this is the result of the deobfuscated strings ( don‚Äôt mind the printed statements it‚Äôs good to know how the code is doing üòÅ). So you can see where this is going.Decoded PS scriptSo now let‚Äôs put our decoded strings into their respective place and take a bird‚Äôs eye view to see how the script actually is and go over what it does.Encoded and Decoded scriptNow that we have the beautiful thing here, what is it actually doing?First, it creates an alias called ‚Äúrzs‚Äù which is used to execute a series of commands using the ‚Äúinvoke-expression‚Äù. It assigns a value to the ‚Äúglobal:block‚Äù variable to create a new instance of ‚ÄúSystem.Net.WebClient‚Äù class and then invokes the method ‚ÄúDownlaodString‚Äù of the ‚ÄúWebClient‚Äù instance with our precious URL ‚Äúhxxp://dz7eg[.]top/515/sdfzw.php?i=‚Äù.One interesting is that it concatenates the hostname of the machine to the URL as a parameter perhaps to keep track of the infected devices.If it survives the week perhaps I will see if we can get that 2nd stage payload.Hope you enjoyed it üôÇ God bless you!IOC  SHA256 hash: 9d1582c69b56d7279f4962a9648524d9c57613b8fc2f7ad74fc2fd55f748e200  SHA1 hash: c0b8449c705d2603a419f210ad3c7a2f98941b9b  MD5 hash: c027bbcb1ccdc36e4b742b8d445b73fa  URL: hxxp://dz7eg[.]top/515/sdfzw.php?i=",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2023/05/30/Powershell-Dropper/'> <img src='/images/20.png' alt='Powershell Dropper'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2023-05-30T07:01:35-05:00'>May 30, 2023</time> </span> </div><h2 class='article__title'>Powershell Dropper</h2> <p class='article__excerpt'>I found an interesting PowerShell script uploaded today on Malware Bazaar uploaded at 2023-05-31 02:06 (UTC) then turns out to be a dropper...</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='PEMB'><img class='article__author-image' src='/images/0.png' alt='PEMB's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>PEMB</a><span> in </span> <span class='article-tags'> <a href='/tag/malware' class='article__tag'>malware</a>  <a href='/tag/dropper' class='article__tag'>dropper</a> </span></div></div></div></div></div>"
    } 
  
]
